<?php
/**
 * @file
 * Adds the OneAll Social Login widget at the locations
 * chosen by the administrator.
 */

/**
 * Return the URL of the JavaScript library.
 */
function social_login_widget_get_js_library($subdomain, $https_enabled = FALSE) {
  return (($https_enabled ? 'https' : 'http') . '://' . $subdomain . '.api.oneall.com/socialize/library.js');
}

/**
 * Checks if the current connection is being made over https.
 */
function social_login_widget_is_https_on () {

    if (isset ($_SERVER) && is_array ($_SERVER)) {

        if (! empty ($_SERVER ['SERVER_PORT'])) {
            if (trim ($_SERVER ['SERVER_PORT']) == '443') {
                return true;
            }
        }

        if (! empty ($_SERVER ['HTTP_X_FORWARDED_PROTO'])) {
            if (strtolower (trim ($_SERVER ['HTTP_X_FORWARDED_PROTO'])) == 'https') {
                return true;
            }
        }

        if (! empty ($_SERVER ['HTTPS'])) {
            if (stristr($_SERVER['HTTPS'], 'off') === false) {
                return true;
            }
        }

    }

    return false;
}

/**
 * Builds the code for the social network buttons and returns it as string.
 */
function social_login_widget_get_js_plugin($plugin_type, $subdomain, $providers, $containerid, $user_token = '') {
  global $base_url;

  // Use https?
  $use_https = social_login_widget_is_https_on ();

  // Check required settings.
  if (!empty($containerid) AND !empty($subdomain)) {

  	// We cannot redirect to a page build using Ajax.
  	if (!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') {
  		$origin = $base_url;
  	} else {
  		$origin = social_login_get_current_url($use_https);
  	}

    // Build the callback uri.
    $callback_uri = url('social_login/callback', array('absolute' => TRUE, 'query' => array ('origin' => $origin)));

    // Build Javascript.
    $js = array();
    $js[] = "var _oneall = _oneall || [];";
    $js[] = "_oneall.push(['". $plugin_type ."', 'set_providers', ['". implode("','", $providers) . "']]);";
    $js[] = "_oneall.push(['". $plugin_type ."', 'set_callback_uri', '". $callback_uri ."']);";

    if ($plugin_type == 'social_link') {
      $js[] = "_oneall.push(['". $plugin_type ."', 'set_force_re_authentication', true]);";

      if ( ! empty ($user_token)) {
        $js[] = "_oneall.push(['". $plugin_type ."', 'set_user_token', '". $user_token ."']);";
      }
    }

    $js[] = "_oneall.push(['". $plugin_type ."', 'do_render_ui', '". $containerid ."']);";
    $js[] = "<!-- OneAll.com / Social Login for Drupal -->";
    $js = implode("\n", $js);

    return $js;
  }
}

/**
 * Returns the current url of the page.
 */
function social_login_get_current_url($https_enabled = FALSE) {

  // Curent URI.
  $request_uri = (isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : $_SERVER['PHP_SELF']);

  // Pantheon.io (only provides port 80 and 443)
  if (isset($_SERVER['PANTHEON_ENVIRONMENT'])) {
    $redirect_to = $_SERVER['HTTP_X_PROTO'] . $_SERVER['HTTP_HOST'] . $request_uri;
  }
  // Default.
  else {
    // Request Host.
    $request_host = (isset($_SERVER['HTTP_X_FORWARDED_HOST']) ? $_SERVER['HTTP_X_FORWARDED_HOST'] : (isset($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST'] : $_SERVER['SERVER_NAME']));

    // Request Protocol.
    $request_protocol = ($https_enabled ? 'https' : 'http');

    // SERVER_PORT is usually wrong on proxies, don't use it!
    if (isset($_SERVER['HTTP_X_FORWARDED_PORT'])) {
      $request_port = intval($_SERVER['HTTP_X_FORWARDED_PORT']);
    }
    // Does not seem like a proxy.
    elseif (isset($_SERVER['SERVER_PORT'])) {
      $request_port = intval($_SERVER['SERVER_PORT']);
    }
    // No port.
    else {
      $request_port = '';
    }

    // Remove standard ports.
    $request_port = (!in_array($request_port, array(80, 443)) ? $request_port : '');

    // Build url.
    $redirect_to = $request_protocol . '://' . $request_host . (!empty($request_port) ? (':' . $request_port) : '') . $request_uri;
  }

  return $redirect_to;
}

/**
 * Implements hook_block_info().
 */
function social_login_widget_block_info() {
  $blocks['social_login_widget'] = array(
    'info' => t('OneAll Social Login'),
    'weight' => 0,
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function social_login_widget_block_view($delta = '') {
  global $user;

  $block = array();

  // is this our widget?
  if ($delta == 'social_login_widget') {

    // Read Settings.
    $settings = social_login_widget_get_settings();

    // Hide the block for logged in users.
    if (empty($user->uid) OR $settings['block_icons_loggedin'] <> 'hide') {

      // Container to add the buttons to.
      $containerid = 'social_login_providers_' . rand(99999, 9999999);

      // Use https?
      $use_https = social_login_widget_is_https_on ();

      //Get Javscript Library
      $js_library = social_login_widget_get_js_library($settings['api_subdomain'], $use_https);

      //Get inline Javascript.
      $js_inline = social_login_widget_get_js_plugin('social_login', $settings['api_subdomain'], $settings['enabled_providers'], $containerid);

      // Setup Block.
      $block['subject'] = t('Login with your Social Network account.');
      $block['content']['#markup'] = theme('social_login_widget_provider_container_block', array('containerid' => $containerid));

      // Attached cacheable Javascript
      $block['content']['#attached']['js'] = array(
        $js_library => array('type' => 'external'),
        $js_inline => array('type' => 'inline', 'scope' => 'footer'),
      );
    }
  }
  return $block;
}


/**
 * Implements hook_form_alter().
 */
function social_login_widget_form_alter(&$form, &$form_state) {

  switch ($form['#form_id']) {
    // Hook into login page.
    case 'user_login':
      social_login_widget_show_providers($form, $form_state, 'login_page');
      break;

    // Hook into edit profile page.
    case 'user_profile_form':
      social_login_widget_show_providers($form, $form_state, 'edit_profile_page');
      break;

    // Hook into registration page.
    default:
      if (isset($form['#user_category']) && $form['#user_category'] == 'register') {
        social_login_widget_show_providers($form, $form_state, 'registration_page');
      }
      break;
  }
}


/**
 * Implements hook_form_USER_LOGIN_BLOCK_alter().
 */
function social_login_widget_form_user_login_block_alter(&$form, &$form_state) {
  social_login_widget_show_providers($form, $form_state, 'side_panel');
}


/**
 * Generic function called to display the social providers.
 */
function social_login_widget_show_providers(&$form, &$form_state, $target) {

  // Read Settings.
  $settings = social_login_widget_get_settings();

  // Enabled?
  $widget_enabled = FALSE;

  // Show in fieldset?
  $widget_in_fieldset = FALSE;

  // OneAll User Token.
  $user_token = '';

  // Where are the buttons shown?
  switch ($target) {
    // Side Panel.
    case 'side_panel':
      $plugin_type = 'social_login';

      // Do not show if disabled by admin.
      if ($settings['side_panel_icons'] <> 'disable') {
        $widget_enabled = TRUE;
        $title = $settings['side_panel_caption'];
        $position = ($settings['side_panel_icons'] == 'below' ? 100 : (-100));
      }
      break;

    // Registration Page.
    case 'registration_page':
      $plugin_type = 'social_login';

      // Do not show if there is already a session.
      if (empty($_SESSION['social_login_session_open'])) {
        // Do not show if disabled by admin.
        if ($settings['registration_page_icons'] <> 'disable') {
          $widget_enabled = TRUE;
          $title = $settings['registration_page_caption'];
          $position = ($settings['registration_page_icons'] == 'below' ? 100 : (-100));
        }
      }
      // Hide only once.
      else if (isset($_SESSION['social_login_session_open'])) {
      	/* $_SESSION['social_login_session_open'] === 1
      	 * Assignment below prevents the SESSION to be displayed in future registration form (preventing registration)
      	 * and displays the provider icons again (the if condition above).
      	 */
      	$_SESSION['social_login_session_open'] = 0;
      }
      break;

    // Login Page.
    case 'login_page':
      $plugin_type = 'social_login';

      // Do not show if there is already a session.
      if (empty($_SESSION['social_login_session_open'])) {
        // Do not show if disabled by admin.
        if ($settings['login_page_icons'] <> 'disable') {
          $widget_enabled = TRUE;
          $title = $settings['login_page_caption'];
          $position = ($settings['login_page_icons'] == 'above' ? -100 : 100);
        }
      }
      break;

    // Edit Profile Page.
    case 'edit_profile_page':
      if ($settings['profile_page_icons'] <> 'disable') {
        // Needed to retrieve his token.
        global $user;

        // Unique token.
        $user_token = social_login_core_get_user_token_for_uid($user->uid);

        // Type of plugin.
        $plugin_type = 'social_link';

        // Enable Widget.
        $widget_enabled = TRUE;

        // Show in fieldset.
        $widget_in_fieldset = TRUE;

        // Title.
        $title = $settings['profile_page_caption'];

        // Display on top.
        $position = ($settings['profile_page_icons'] == 'above' ? -100 : 100);
      }
      break;

    // Unkown.
    default:
      $plugin_type = 'social_login';

      // Widget is enabled.
      $widget_enabled = TRUE;

      // Default title.
      $title = t('Login with');

      // Display on botton.
      $position = 100;
      break;
  }

  // Enabled.
  if ($widget_enabled === TRUE) {

    // Container to add the buttons to.
    $containerid = 'social_login_providers_' . rand(99999, 9999999);

    // Icon Block
    $social_login_block =  theme('html_tag', array('element' => array(
    	'#tag' => 'script',
    	'#value_prefix' => "\n<!--//--><![CDATA[//><!--\n",
    	'#value' => social_login_widget_get_js_plugin($plugin_type, $settings['api_subdomain'], $settings['enabled_providers'], $containerid, $user_token),
    	'#value_suffix' => "\n//--><!]]>\n",
    	'#attributes' => array(
    		'type' => 'text/javascript',
    	)
     )));

    // Show in fieldset.
    if ($widget_in_fieldset) {

      $form['social_login_' . $containerid] = array(
        '#type' => 'fieldset',
        '#title' => $title,
        '#weight' => $position,
      );

      $form['social_login_' . $containerid]['inner_block'] = array(
        '#prefix' => theme('social_login_widget_provider_container', array('containerid' => $containerid, 'label' => '')),
      	'#suffix' => $social_login_block,
      );
    }
    else {

      $form['social_login_' . $containerid] = array(
        '#prefix' => theme('social_login_widget_provider_container', array('containerid' => $containerid, 'label' => $title)),
      	'#suffix' => $social_login_block,
        '#weight' => $position,
      );
    }

    // Use https?
    $use_https = social_login_widget_is_https_on ();

    //Get Javscript Library
    $js_library = social_login_widget_get_js_library($settings['api_subdomain'], $use_https);

    // Add javascript to the form
    $form['content']['#attached']['js'] = array(
        $js_library => array('type' => 'external')
    );
  }
}


/**
 * Implements hook_theme().
 */
function social_login_widget_theme() {
  return array(
    'social_login_widget_provider_container' => array(
      'template' => 'provider_container',
      'path' => drupal_get_path('module', 'social_login_widget') . '/theme',
      'variables' => array(
        'containerid' => NULL,
        'label' => NULL,
      ),
    ),
    'social_login_widget_provider_container_block' => array(
      'template' => 'block_provider_container',
      'path' => drupal_get_path('module', 'social_login_widget') . '/theme',
      'variables' => array(
        'containerid' => NULL,
      ),
    ),
  );
}


/**
 * Returns the settings.
 */
function social_login_widget_get_settings() {

  // Container.
  $settings = array();
  $settings['enabled_providers'] = array();

  // Default values.
  $settings['api_subdomain'] = '';
  $settings['api_key'] = '';
  $settings['api_secret'] = '';

  $settings['http_handler'] = 'curl';
  $settings['http_protocol'] = 'https';

  $settings['side_panel_icons'] = 'below';
  $settings['side_panel_caption'] = '';

  $settings['registration_page_icons'] = 'below';
  $settings['registration_page_caption'] = '';

  $settings['registration_retrieve_avatars'] = 'enable';
  $settings['registration_approval'] = 'inherit';
  $settings['registration_method'] = 'manual';
  $settings['registration_auto_link'] = 'enable';

  $settings['login_page_icons'] = 'above';
  $settings['login_page_caption'] = '';

  $settings['profile_page_icons'] = 'below';
  $settings['profile_page_caption'] = '';

  $settings['block_icons_loggedin'] = 'hide';

  // Read settings.
  $results = db_query("SELECT setting, value FROM {oneall_social_login_settings}");
  foreach ($results as $result) {
    $settings[$result->setting] = $result->value;
    if (drupal_substr($result->setting, 0, 8) == 'provider' && !empty($result->value)) {
      $settings['enabled_providers'][] = drupal_substr($result->setting, 9, drupal_strlen($result->setting));
    }
  }
  return $settings;
}
