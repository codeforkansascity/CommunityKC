<?php
/* include file imports */
require_once('custom.user.inc');
require_once('custom.helpers.inc');
require_once('custom.services.inc');
require_once('custom.resources.inc');
require_once('event/event.module');
require_once('class/GeoJsonService.php');

/**
 * Implements hook_menu
 * @return array
 */
function custom_menu() {
	$items = array();
	// geojson output
	$items['projects/geojson'] = array(
		'type' => MENU_CALLBACK,
		'title' => 'GeoJson Map',
		'page callback' => '_custom_page_geojson_map',
		'description' => 'outputs project data in geojson',
		'access callback' => TRUE,
		'file' => 'custom.pages.inc',
		'menu_name' => 'main',
  );
  $items['map'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => '',
    'description' => 'New map display with only js dependencies',
    'position' => 'left',
    'weight' => -20,
    'page callback' => '_custom_page_newmap_js',
    'access callback' => TRUE,
    'file' => 'custom.pages.inc'
  );

  // Misc
  // one-time data run
  /*
  $items['run_user_map'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Run User Map',
    'page callback' => '_custom_page_map_users',
    'description' => 'One time runs user maps to projects.',
    'access callback' => TRUE,
    'file' => 'custom.user.inc',
    'menu_name' => 'devel',
  ); */
  // sub module menu functions
  $items = array_merge($items, _custom_event_menu());
  return $items;
}
/* webform intercept - mail to person on project contact
   volunteer form
   this is confusing but we drill down from the project url to load the
   project node and find the contact person.
*/
function custom_mail_alter(&$message) {
	// check for webform
	if ($message['id'] == 'webform_submission') {
		// check for node id 999 which is the volunteer form.
		if ($message['params']) {
			// search message body for url
			$msg_body = $message['params']['message'];
			$matches = array();
			// preg_match
			$has_match = preg_match("/This person has expressed interest in volunteering for\s*.*?:\s*(http.*?)\s/", $msg_body, $matches);
			if ($has_match && count($matches) == 2) {
				$url = $matches[1];
				$node_id = _custom_find_node_id_from_project_url($url);
				if ($node_id) {
					$project = node_load($node_id);
					$contact_email = $project->field_lead_contact_email[LANGUAGE_NONE][0]['value'];
					$contact_name = $project->field_lead_contact_person[LANGUAGE_NONE][0]['value'];
					$message['to'] .= ',' . $contact_email;
				}
			}
		}
	}
}
/**
 * Find node id from a given url and path
 * volunteer form
 */
function _custom_find_node_id_from_project_url($url) {
	global $base_url;
	$parsed = parse_url($url);
	if ($parsed && !empty($parsed['path'])) {
		// expecting path to start with a /
		$path = strpos($parsed['path'],'/') === 0 ? substr($parsed['path'],1) : $parsed['path'];
		$node_path = drupal_get_normal_path($path);
		$nid = str_replace('node/', '', $node_path);
		return $nid;
	}
	return false;
}

/* Drupal hooks for this module
* notifications
 */

function custom_node_presave($node) {
	switch ($node->type) {
		case 'project':
			# run the project node presave
			_custom_project_node_presave($node);
			break;
	}
}

# todo: testing

/* Project node type functions
* notifications
*/
function _custom_project_node_presave($node) {
	if (empty($node->nid)) {
		# only run if this is a new node and has a neighborhood set
		$neighborhoods = array();

		if (!empty($node->field_neighborhood)) {
			foreach($node->field_neighborhood[LANGUAGE_NONE] as $delta=>$fld) {
				$neighborhoods[] = $fld['tid'];
			}
		}
		$project_types = array();
		if (!empty($node->field_project_type)) {
			foreach($node->field_project_type[LANGUAGE_NONE] as $delta=>$fld) {
				$project_types[] = $fld['tid'];
			}
		}
		# query
		# users with field_project_notify_prefs
		# test only
		# data format:
		#  uid / type / taxonomy id = pref type.
		// $notifications = _custom_notification_query($neighborhoods, $project_types, $node->uid);
		$match_count = 0;
		foreach ($notifications as $uid=>$matches) {
			$match_count++;
			# loop through notifications
			if ($uid == $node->uid) {
				# skip if current user matches up.
				continue;
			}
			$add_to_queue = false;
			foreach ($matches as $taxonomy_type=>$records) {;
				$both_matches = 0; # if this gets to 2 then add to queue = true
				foreach($records as $tid=>$pref) {
					# turn pref to bit array, function in helpers.
					$prefs_bit = _custom_decimal_prefs_to_bit_array($pref);
					# same neighborhood
					if ($taxonomy_type == "neighborhoods" && in_array($tid, $neighborhoods) ) {
						if ($prefs_bit[2] == "1") {
							# same neighborhood
							$add_to_queue = TRUE;
//							echo "add to queue same n\n";
						}
						else {
							if ($prefs_bit[0] == "1") {
								$both_matches++;
//								echo "adding match\n";
							}
						}
					}
					# same project type
					if ($taxonomy_type == "project_types" && in_array($tid, $project_types) ) {
						if ($prefs_bit[1] == "1") {
							$add_to_queue = TRUE;
//							echo "add to queue project\n";
						}
						else {
							if($prefs_bit[0] == "1") {
								$both_matches++;
//								echo "adding match\n";
							}
						}
					}
				}
				if ($both_matches == 2) {
					$add_to_queue = true;
//					echo "add to queue both matches\n";
				}
			}
			if ($add_to_queue) {
				// now add if needed.
//				echo "adding to queue \n";
				_custom_enqueue_project_notification($node,$uid, $neighborhoods, $project_types);
			}
		}
	}
}

/* drush eval "var_dump(_custom_decimal_prefs_to_bit_array(5));"
array(3) {
  [0]=>
  string(1) "1"
  [1]=>
  string(1) "0"
  [2]=>
  string(1) "1"
}

positions seem backwards because binary is right to left and string is left to right - so 0 is highest digit, etc.
 [2]same neighborhood, [1] same type, [0] same type and neighborhood.
 */

function _custom_enqueue_project_notification($node, $uid, $neighborhoods, $project_types) {
	$user = user_load($uid);
	$tokens = array(
		'name' => $user->name,
		'mail' => $user->mail,
		'project' => $node->title,
		'neighborhoods' => $neighborhoods,
		'project_types' => $project_types
	);
	$queue = new stdClass();
	$queue->uid = $uid;
	$queue->mail_type = 'custom_project_notification_email';
	$queue->tokens = serialize($tokens);
	$queue->created = REQUEST_TIME;
	$queue->sent = null;
	drupal_write_record( 'custom_notify_email_queue', $queue);
}
/* test/proof of concept code
result of below:
uid = 1:
array (
  'neighborhoods' =>
  array (
    4 => 3,
    5 => 0,
    6 => 1,
    14 => 7,
  ),
  'project_types' =>
  array (
    3 => 2,
    91 => 5,
    100 => 1,
  ),
)

uid = 2:
array (
  'neighborhoods' =>
  array (
    6 => 6,
  ),
  'project_types' =>
  array (
    14 => 5,
    10 => 4,
  ),
)



function _custom_get_notification_test_array() {
	$results = array();
	$results[1]['neighborhoods'][4] = 3;
	$results[1]['neighborhoods'][5] = 0;
	$results[1]['neighborhoods'][6] = 1;
	$results[1]['neighborhoods'][14] = 7;
	$results[1]['project_types'][3] = 2;
	$results[1]['project_types'][91] = 5;
	$results[1]['project_types'][100] = 1;

	$results[2]['neighborhoods'][6] = 6;
	$results[2]['project_types'][14] = 5;
	$results[2]['project_types'][10] = 4;
	return $results;
}

function _custom_test_notification_loop() {
	$results = _custom_get_notification_test_array();
	foreach($results as $uid=>$match) {
		echo "$uid\n";
		echo var_export($match,true);
		echo "\n\n";
	}
}
*/

/**
 * Queries the database for users with projects matching the TIDs in neighborhood and project types
 * returns a list of users, and their notification prefs.
 * @param array $neighborhoods array of tid ints for neighborhoods based on saved project
 * @param $project_types array of tid ints for project types based on save project
 * @return  array of notification results in the format results[user_id][neighborhoods|project_types][tid] => [0-7]
 */
function _custom_notification_query($neighborhoods, $project_types, $uid) {

	$neighborhood_vid = 1;
	$project_type_vid = 2;
	if (count($neighborhoods) > 0 && count($project_types) > 0) {
		# both neighborhoods and project types
		$query_sql = "
select
	-- user
	u.uid, u.name, u.mail, prefs.field_project_notification_prefs_value as notification_prefs,
    -- project node
    n.nid, n.title,
    -- neighborhood
    ti_nh.tid as tid_nh, ttd_nh.name as neighborhood,
    -- project type
    ti_pt.tid as tid_pt, ttd_pt.name as project_type
-- 	*
from
	{node} n
    inner join
		{users} u
			on u.uid = n.uid
-- user notification prefs
	inner join
		{field_data_field_project_notification_prefs} prefs
			on prefs.bundle = 'user' and prefs.entity_id = u.uid
-- neighborhood
    inner join
		{taxonomy_index} ti_nh
			on ti_nh.nid = n.nid
	inner join
		{taxonomy_term_data} ttd_nh
			on ti_nh.tid = ttd_nh.tid and ttd_nh.vid = :nh_vid
-- project type
	inner join
		{taxonomy_index} ti_pt
			on ti_pt.nid = n.nid
	inner join
		{taxonomy_term_data} ttd_pt
			on ti_pt.tid = ttd_pt.tid and ttd_pt.vid = :pt_vid
where
	prefs.field_project_notification_prefs_value > 0
and
	u.uid != :uid
and
	n.type = 'project'
and
    n.status = 1
and
(	ti_nh.tid in(:nh_tids)
or
	ti_pt.tid in(:pt_tids))";
		// error is happening if project does not have a neighborhood.
		$db = db_query($query_sql, array(
			':nh_vid' => $neighborhood_vid,
			':pt_vid' => $project_type_vid,
			':uid' => $uid,
			':nh_tids' => $neighborhoods,
			':pt_tids' => $project_types
		));
	}
	elseif (count($project_types > 0) ) {
		# just project types
		$query_sql = "select
	-- user
	u.uid, u.name, u.mail, prefs.field_project_notification_prefs_value as notification_prefs,
    -- project node
    n.nid, n.title,
    -- project type
    ti_pt.tid as tid_pt, ttd_pt.name as project_type
-- 	*
from
	{node} n
    inner join
		{users} u
			on u.uid = n.uid
-- user notification prefs
	inner join
		{field_data_field_project_notification_prefs} prefs
			on prefs.bundle = 'user' and prefs.entity_id = u.uid
-- project type
	inner join
		{taxonomy_index} ti_pt
			on ti_pt.nid = n.nid
	inner join
		{taxonomy_term_data} ttd_pt
			on ti_pt.tid = ttd_pt.tid and ttd_pt.vid = :pt_vid
where
	prefs.field_project_notification_prefs_value > 0
and
	u.uid != :uid
and
	n.type = 'project'
and
    n.status = 1
and
	ti_pt.tid in(:pt_tids)";
		$db = db_query($query_sql, array(
			':pt_vid' => $project_type_vid,
			':uid' => $uid,
			':pt_tids' => $project_types
		));
	}
	$results = array();
// uid / type / taxonomy id = pref type.
	echo "row count: " . $db->rowCount() . "\n";
	foreach($db as $record) {
		 // echo "\nrecord\n" . var_export($record) . "\n";
		if (property_exists($record, 'tid_nh')) {
			 $results[$record->uid]['neighborhoods'][$record->tid_nh] = $record->notification_prefs;
		}
		elseif (property_exists($record, 'tid_pt')) {
			$results[$record->uid]['project_types'][$record->tid_pt] = $record->notification_prefs;
		}
	}
	return $results;
}

/* end project node type functions */

/* temp functions for testing */
function _custom_rando_notifcation_settings() {
	$users = db_select('users','u')
			->fields('u', array('uid'))
			->execute();
	while($u = $users->fetch()) {
	//	echo '$u["uid"]: ' . $u->uid . "\n";
		if (_custom_user_is_author($u)) {
			$notify_prefs = rand(0,7);
			$user = user_load($u->uid);
			$edit = (array)$user;
			$edit['field_project_notification_prefs'][LANGUAGE_NONE][0]['value'] = $notify_prefs;
			user_save($user, $edit);
		//	echo "user " . $user->uid . " set to " . $notify_prefs . "\n";
		}
	}
}

function _custom_max_notification_settings() {
	$users = db_select('users','u')
		->fields('u', array('uid'))
		->execute();
	while($u = $users->fetch()) {
		//	echo '$u["uid"]: ' . $u->uid . "\n";
		if (_custom_user_is_author($u)) {
			$notify_prefs = 7;
			$user = user_load($u->uid);
			$edit = (array)$user;
			$edit['field_project_notification_prefs'][LANGUAGE_NONE][0]['value'] = $notify_prefs;
			user_save($user, $edit);
			//		echo "user " . $user->uid . " set to " . $notify_prefs . "\n";
		}
	}
}

function _custom_resave_projects() {
	$nodes = db_select("node", 'n')
		->fields('n', array('nid'))
		->condition('type','project','=')
		->condition('status',1,'=')
		->execute()	;
	while($n = $nodes->fetchAssoc()) {
		$node = node_load($n['nid']);
		node_save($node);
	//	die();
	}
}


# Services
/**
 * Implements hook_ctools_plugin_api()
 * needed to tell ctools we are using the Services module API and allow hook_default_services_endpoint to work
 */
function custom_ctools_plugin_api($owner, $api)
{
	if ($owner == 'services' && $api == 'services') {
		return array(
			'version' => 3,
			'file' => 'custom.services.inc',
			'path' => drupal_get_path('module', 'custom')
		);
	}
	return array();
}
function custom_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'event_node_form':
      _custom_event_add_form_alter($form, $form_state, $form_id);
      break;
  }
}
